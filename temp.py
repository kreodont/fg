# # -*- coding: utf8 -*-
# import pickle
# import codecs
# from Monster import Monster, translate_from_iso_codes
# # from ActionsAndTraits import ActionsAndTraits
# import xml.etree.ElementTree as Et
# import html
# import re
from fg_translations import translate_from_iso_codes
print(translate_from_iso_codes("""
<text type="formattedtext">
&#203;&#229;&#233;&#235;&#238;&#237; &#234;&#238;&#227;&#228;&#224;-&#242;&#238; &#225;&#251;&#235; &#248;&#224;&#245;&#242;&#229;&#240;&#241;&#234;&#232;&#236; &#227;&#238;&#240;&#238;&#228;&#238;&#236;, &#234;&#238;&#242;&#238;&#240;&#251;&#233; &#239;&#240;&#238;&#228;&#224;&#226;&#224;&#235; &#243;&#238;&#242;&#229;&#240;&#228;&#232;&#239;&#243; &#236;&#229;&#228;&#252;, &#237;&#232;&#234;&#229;&#235;&#252; &#232; &#241;&#229;&#240;&#229;&#225;&#240;&#238;. &#221;&#242;&#238; &#225;&#251;&#235; &#242;&#224;&#234;&#230;&#229; &#237;&#229;&#225;&#238;&#235;&#252;&#248;&#238;&#233; &#239;&#238;&#240;&#242;, &#227;&#228;&#229; &#242;&#238;&#240;&#227;&#238;&#226;&#246;&#251; &#232;&#237;&#238;&#227;&#228;&#224; &#226;&#251;&#227;&#240;&#243;&#230;&#224;&#235;&#232; &#242;&#238;&#226;&#224;&#240;&#251; &#237;&#224; &#225;&#224;&#240;&#230;&#232; (&#242;&#224;&#234; &#234;&#224;&#234; &#225;&#238;&#235;&#252;&#248;&#232;&#237;&#241;&#242;&#226;&#238; &#237;&#224;&#241;&#242;&#238;&#255;&#249;&#232;&#245; &#241;&#243;&#228;&#238;&#226; &#237;&#229; &#236;&#238;&#227;&#243;&#242; &#239;&#229;&#240;&#229;&#241;&#229;&#247;&#252; &#236;&#229;&#235;&#234;&#232;&#229; &#227;&#240;&#255;&#231;&#229;&#226;&#251;&#229; &#238;&#242;&#236;&#229;&#235;&#232; &#227;&#238;&#240;&#238;&#228;&#224;), &#247;&#242;&#238;&#225;&#251; &#239;&#229;&#240;&#229;&#226;&#229;&#231;&#242;&#232; &#232;&#245; &#226; &#227;&#238;&#240;&#238;&#228;&#224; &#239;&#238; &#226;&#241;&#229;&#236;&#243; &#239;&#238;&#225;&#229;&#240;&#229;&#230;&#252;&#254; &#236;&#229;&#247;&#224;.
&#196;&#226;&#229;&#241;&#242;&#232; &#235;&#229;&#242; &#237;&#224;&#231;&#224;&#228; &#226;&#238;&#235;&#248;&#229;&#225;&#237;&#232;&#234; &#210;&#224;&#235;&#232;&#226;&#224;&#240; &#239;&#238;&#241;&#229;&#235;&#232;&#235;&#241;&#255; &#231;&#228;&#229;&#241;&#252; &#232; &#239;&#238;&#241;&#242;&#240;&#238;&#232;&#235; &#225;&#224;&#248;&#237;&#254; &#226; &#246;&#229;&#237;&#242;&#240;&#229; &#227;&#238;&#240;&#238;&#228;&#224;, &#247;&#242;&#238;&#225;&#251; &#239;&#240;&#238;&#226;&#238;&#228;&#232;&#242;&#252; &#241;&#226;&#238;&#232; &#236;&#232;&#241;&#242;&#232;&#247;&#229;&#241;&#234;&#232;&#229; &#232;&#241;&#241;&#235;&#229;&#228;&#238;&#226;&#224;&#237;&#232;&#255;. &#196;&#238;&#236; &#210;&#224;&#235;&#232;&#226;&#224;&#240;&#224; &#225;&#251;&#235; &#243;&#226;&#229;&#237;&#247;&#224;&#237; &#239;&#235;&#224;&#237;&#224;&#240;&#237;&#251;&#236; &#236;&#224;&#255;&#234;&#238;&#236;, &#234;&#238;&#242;&#238;&#240;&#251;&#233; &#231;&#224;&#236;&#224;&#237;&#232;&#226;&#224;&#235; &#241;&#243;&#249;&#229;&#241;&#242;&#226; &#241; &#228;&#240;&#243;&#227;&#232;&#245; &#239;&#235;&#224;&#237;&#238;&#226; &#226; &#231;&#228;&#224;&#237;&#232;&#229; &#232; &#235;&#238;&#226;&#232;&#235; &#232;&#245; &#242;&#224;&#236;. &#207;&#238;&#241;&#235;&#229; &#242;&#224;&#232;&#237;&#241;&#242;&#226;&#229;&#237;&#237;&#238;&#227;&#238; &#232;&#241;&#247;&#229;&#231;&#237;&#238;&#226;&#229;&#237;&#232;&#255; &#210;&#224;&#235;&#232;&#226;&#224;&#240;&#224; &#230;&#232;&#242;&#229;&#235;&#232; &#203;&#229;&#233;&#235;&#238;&#237;&#224; &#240;&#229;&#248;&#232;&#235;&#232; &#238;&#241;&#242;&#224;&#226;&#232;&#242;&#252; &#229;&#227;&#238; &#225;&#224;&#248;&#237;&#254; &#232; &#236;&#238;&#237;&#241;&#242;&#240;&#238;&#226; &#226; &#239;&#238;&#234;&#238;&#229;.
&#204;&#224;&#227;&#232;&#247;&#229;&#241;&#234;&#224;&#255; &#247;&#243;&#236;&#224;, &#225;&#238;&#230;&#229;&#241;&#242;&#226;&#229;&#237;&#237;&#238;&#229; &#255;&#226;&#235;&#229;&#237;&#232;&#229;, &#232;&#241;&#234;&#224;&#231;&#232;&#226;&#248;&#229;&#229; &#236;&#224;&#227;&#232;&#254; &#212;&#224;&#253;&#240;&#237;&#224;, &#240;&#224;&#231;&#240;&#243;&#248;&#232;&#235;&#224; &#231;&#224;&#249;&#232;&#242;&#243; &#225;&#224;&#248;&#237;&#232;. &#199;&#224;&#239;&#229;&#247;&#224;&#242;&#224;&#237;&#237;&#251;&#229; &#226;&#237;&#243;&#242;&#240;&#232; &#241;&#243;&#249;&#229;&#241;&#242;&#226;&#224; &#225;&#251;&#235;&#232; &#238;&#241;&#226;&#238;&#225;&#238;&#230;&#228;&#229;&#237;&#251;, &#247;&#242;&#238;&#225;&#251; &#224;&#242;&#224;&#234;&#238;&#226;&#224;&#242;&#252; &#203;&#229;&#233;&#235;&#238;&#237;, &#232; &#236;&#224;&#227;&#232;&#255; &#239;&#235;&#224;&#237;&#224;&#240;&#237;&#238;&#227;&#238; &#236;&#224;&#255;&#234;&#224; &#225;&#251;&#235;&#224; &#239;&#229;&#240;&#229;&#237;&#224;&#239;&#240;&#224;&#226;&#235;&#229;&#237;&#224; &#238;&#225;&#240;&#224;&#242;&#237;&#238; &#226; &#236;&#224;&#242;&#229;&#240;&#232;&#224;&#235;&#252;&#237;&#251;&#233; &#239;&#235;&#224;&#237;, &#231;&#224;&#241;&#242;&#224;&#226;&#235;&#255;&#255; &#227;&#243;&#236;&#224;&#237;&#238;&#232;&#228;&#238;&#226;, &#234;&#238;&#242;&#238;&#240;&#251;&#229; &#241;&#236;&#238;&#242;&#240;&#229;&#235;&#232; &#237;&#224; &#237;&#229;&#227;&#238;, &#239;&#224;&#240;&#224;&#235;&#232;&#231;&#238;&#226;&#224;&#242;&#252;&#241;&#255;. &#203;&#229;&#233;&#235;&#238;&#237; &#225;&#251;&#235; &#225;&#251;&#241;&#242;&#240;&#238; &#231;&#224;&#245;&#226;&#224;&#247;&#229;&#237; &#232; &#226;&#239;&#238;&#241;&#235;&#229;&#228;&#241;&#242;&#226;&#232;&#232; &#239;&#238;&#234;&#232;&#237;&#243;&#242; &#232; &#238;&#241;&#242;&#224;&#226;&#224;&#235;&#241;&#255; &#242;&#224;&#234;&#232;&#236; &#225;&#238;&#235;&#229;&#229; &#226;&#229;&#234;&#224;.
&#207;&#229;&#240;&#226;&#251;&#236; &#228;&#229;&#235;&#238;&#236; &#241;&#238;&#235;&#228;&#224;&#242;&#251; &#205;&#229;&#226;&#229;&#240;&#226;&#232;&#237;&#242;&#229;&#240;&#224; &#226; &#203;&#229;&#233;&#235;&#238;&#237;&#229; &#243;&#237;&#232;&#247;&#242;&#238;&#230;&#232;&#235;&#232; &#239;&#235;&#224;&#237;&#224;&#240;&#237;&#251;&#233; &#204;&#224;&#255;&#234; &#226; &#228;&#238;&#236;&#229; &#210;&#224;&#235;&#232;&#226;&#224;&#240;&#224;. &#204;&#224;&#227; &#195;&#224;&#235;&#235;&#232;&#238; &#221;&#235;&#232;&#225;&#240;&#238; &#242;&#229;&#239;&#229;&#240;&#252; &#226;&#238;&#241;&#241;&#242;&#224;&#237;&#238;&#226;&#232;&#235; &#204;&#224;&#255;&#234; &#232; &#237;&#224;&#247;&#224;&#235; &#241;&#226;&#238;&#232; &#241;&#238;&#225;&#241;&#242;&#226;&#229;&#237;&#237;&#251;&#229; &#232;&#241;&#241;&#235;&#229;&#228;&#238;&#226;&#224;&#237;&#232;&#255; &#226; &#253;&#244;&#232;&#240;&#237;&#238;&#236; &#239;&#235;&#224;&#237;&#229;.
&#196;&#238; &#241;&#226;&#238;&#229;&#227;&#238; &#239;&#224;&#228;&#229;&#237;&#232;&#255; &#203;&#229;&#233;&#235;&#238;&#237; &#225;&#251;&#235; &#231;&#224;&#249;&#232;&#249;&#229;&#237; &#241;&#235;&#224;&#225;&#238; &#238;&#240;&#227;&#224;&#237;&#232;&#231;&#238;&#226;&#224;&#237;&#237;&#238;&#233; &#227;&#240;&#243;&#239;&#239;&#238;&#233; &#224;&#226;&#224;&#237;&#242;&#254;&#240;&#232;&#241;&#242;&#238;&#226;, &#237;&#224;&#231;&#251;&#226;&#224;&#229;&#236;&#251;&#245; &#236;&#229;&#247;&#224;&#236;&#232; &#203;&#229;&#233;&#235;&#238;&#237;&#224;. &#202;&#238;&#227;&#228;&#224; &#228;&#238;&#236; &#210;&#224;&#235;&#232;&#226;&#224;&#240;&#224; &#226;&#251;&#239;&#243;&#241;&#242;&#232;&#235; &#241;&#226;&#238;&#232;&#245; &#236;&#238;&#237;&#241;&#242;&#240;&#238;&#226;, &#236;&#229;&#247;&#232; &#241;&#240;&#224;&#230;&#224;&#235;&#232;&#241;&#252;, &#247;&#242;&#238;&#225;&#251; &#239;&#240;&#232;&#234;&#240;&#251;&#242;&#252; &#225;&#229;&#227;&#241;&#242;&#226;&#238; &#227;&#238;&#240;&#238;&#230;&#224;&#237;. &#206;&#237;&#232; &#243;&#236;&#229;&#240;&#235;&#232; &#232; &#241;&#242;&#224;&#235;&#232; &#239;&#240;&#232;&#231;&#240;&#224;&#234;&#224;&#236;&#232;, &#239;&#240;&#232;&#226;&#255;&#231;&#224;&#237;&#237;&#251;&#236;&#232; &#234; &#240;&#243;&#232;&#237;&#224;&#236; &#203;&#229;&#233;&#235;&#238;&#237;&#224;. &#210;&#229;&#239;&#229;&#240;&#252; &#238;&#237;&#232; &#241; &#238;&#239;&#224;&#241;&#234;&#238;&#233; &#237;&#224;&#225;&#235;&#254;&#228;&#224;&#254;&#242; &#231;&#224; &#226;&#238;&#241;&#241;&#242;&#224;&#237;&#238;&#226;&#235;&#229;&#237;&#232;&#229;&#236; &#227;&#238;&#240;&#238;&#228;&#224;, &#237;&#224;&#228;&#229;&#255;&#241;&#252;, &#247;&#242;&#238; &#240;&#229;&#234;&#238;&#237;&#241;&#242;&#240;&#243;&#232;&#240;&#238;&#226;&#224;&#237;&#237;&#224;&#255; &#225;&#224;&#248;&#237;&#255; &#237;&#229; &#239;&#240;&#232;&#237;&#229;&#241;&#229;&#242; &#239;&#238;&#228;&#238;&#225;&#237;&#238;&#233; &#234;&#224;&#242;&#224;&#241;&#242;&#240;&#238;&#244;&#251;.
&#202;&#238;&#227;&#228;&#224; &#226;&#251; &#225;&#243;&#228;&#229;&#242;&#229; &#227;&#238;&#242;&#238;&#226;&#251; &#234; &#239;&#240;&#232;&#234;&#235;&#254;&#247;&#229;&#237;&#232;&#254;, &#239;&#238;&#234;&#224;&#230;&#232;&#242;&#229; &#234;&#224;&#240;&#242;&#243; Leilon &#232;&#227;&#240;&#238;&#234;&#224;&#236; &#232; &#239;&#240;&#238;&#247;&#232;&#242;&#224;&#233;&#242;&#229; &#226;&#241;&#235;&#243;&#245; &#241;&#235;&#229;&#228;&#243;&#254;&#249;&#232;&#233; &#242;&#229;&#234;&#241;&#242; &#226; &#240;&#224;&#236;&#234;&#229;:
&#205;&#229;&#228;&#238;&#241;&#242;&#240;&#238;&#229;&#237;&#237;&#251;&#233; &#247;&#224;&#241;&#242;&#238;&#234;&#238;&#235; &#203;&#229;&#233;&#235;&#238;&#237;&#224; &#226;&#241;&#234;&#238;&#240;&#229; &#238;&#225;&#240;&#224;&#231;&#243;&#229;&#242; &#239;&#238;&#235;&#237;&#251;&#233; &#239;&#238;&#235;&#243;&#234;&#240;&#243;&#227; &#237;&#224; &#241;&#229;&#226;&#229;&#240;&#238;-&#226;&#238;&#241;&#242;&#238;&#247;&#237;&#238;&#233; &#241;&#242;&#238;&#240;&#238;&#237;&#229; &#227;&#238;&#240;&#238;&#228;&#224;, &#231;&#224;&#249;&#232;&#249;&#229;&#237;&#237;&#251;&#233; &#231;&#229;&#236;&#235;&#255;&#237;&#251;&#236; &#226;&#224;&#235;&#238;&#236;. &#205;&#224; &#254;&#227;&#238;-&#231;&#224;&#239;&#224;&#228;&#229; &#237;&#238;&#226;&#251;&#229; &#239;&#238;&#241;&#229;&#235;&#229;&#237;&#246;&#251; &#239;&#251;&#242;&#224;&#254;&#242;&#241;&#255; &#239;&#238;&#241;&#242;&#240;&#238;&#232;&#242;&#252; &#228;&#238;&#234;&#232; &#228;&#235;&#255; &#225;&#224;&#240;&#230;, &#247;&#242;&#238;&#225;&#251; &#239;&#229;&#240;&#229;&#241;&#229;&#247;&#252; &#225;&#238;&#235;&#238;&#242;&#238; &#232; &#226;&#241;&#242;&#240;&#229;&#242;&#232;&#242;&#252; &#242;&#238;&#240;&#227;&#238;&#226;&#251;&#229; &#241;&#243;&#228;&#224; &#226; &#236;&#238;&#240;&#229;.
&#199;&#224; &#239;&#240;&#229;&#228;&#229;&#235;&#224;&#236;&#232; &#227;&#238;&#240;&#238;&#228;&#224; &#239;&#224;&#235;&#224;&#242;&#238;&#247;&#237;&#251;&#233; &#235;&#224;&#227;&#229;&#240;&#252; &#239;&#238;&#241;&#229;&#235;&#229;&#237;&#246;&#229;&#226; &#241;&#242;&#224;&#237;&#238;&#226;&#232;&#242;&#241;&#255; &#226;&#241;&#229; &#236;&#229;&#237;&#252;&#248;&#229;, &#239;&#238;&#241;&#234;&#238;&#235;&#252;&#234;&#243; &#237;&#224; &#227;&#240;&#255;&#231;&#237;&#251;&#245; &#243;&#235;&#232;&#246;&#224;&#245; &#203;&#229;&#233;&#235;&#238;&#237;&#224; &#226;&#238;&#231;&#226;&#238;&#228;&#255;&#242;&#241;&#255; &#237;&#238;&#226;&#251;&#229; &#231;&#228;&#224;&#237;&#232;&#255; &#232;&#231; &#228;&#229;&#240;&#229;&#226;&#224; &#232;&#235;&#232; &#234;&#224;&#236;&#237;&#255; &#241; &#241;&#238;&#235;&#238;&#236;&#229;&#237;&#237;&#251;&#236;&#232; &#234;&#240;&#251;&#248;&#224;&#236;&#232;. &#194; &#246;&#229;&#237;&#242;&#240;&#229; &#226;&#241;&#229;&#227;&#238; &#253;&#242;&#238;&#227;&#238;, &#234;&#224;&#234; &#236;&#224;&#255;&#234;, &#226;&#238;&#231;&#226;&#251;&#248;&#224;&#229;&#242;&#241;&#255; &#237;&#238;&#226;&#251;&#233; &#228;&#238;&#236; &#210;&#224;&#235;&#232;&#226;&#224;&#240;&#224;, &#246;&#232;&#235;&#232;&#237;&#228;&#240;&#232;&#247;&#229;&#241;&#234;&#224;&#255; &#225;&#224;&#248;&#237;&#255; &#226;&#238;&#235;&#248;&#229;&#225;&#237;&#232;&#234;&#224;, &#226; &#247;&#229;&#242;&#251;&#240;&#229; &#240;&#224;&#231;&#224; &#226;&#251;&#248;&#229; &#235;&#254;&#225;&#238;&#227;&#238; &#228;&#240;&#243;&#227;&#238;&#227;&#238; &#231;&#228;&#224;&#237;&#232;&#255;. &#205;&#229;&#234;&#238;&#242;&#238;&#240;&#251;&#229; &#243;&#247;&#224;&#241;&#242;&#234;&#232; &#226;&#241;&#229; &#229;&#249;&#229; &#235;&#229;&#230;&#224;&#242; &#226; &#240;&#243;&#232;&#237;&#224;&#245;, &#237;&#238; &#239;&#238;&#241;&#229;&#235;&#229;&#237;&#246;&#251; &#240;&#224;&#225;&#238;&#242;&#224;&#254;&#242; &#225;&#251;&#241;&#242;&#240;&#238;, &#240;&#224;&#241;&#247;&#232;&#249;&#224;&#255; &#232; &#226;&#238;&#241;&#241;&#242;&#224;&#237;&#224;&#226;&#235;&#232;&#226;&#224;&#255;.
&#207;&#238;&#241;&#229;&#242;&#232;&#242;&#229;&#235;&#232; &#241; &#236;&#238;&#237;&#229;&#242;&#238;&#233;, &#247;&#242;&#238;&#225;&#251; &#239;&#238;&#242;&#240;&#224;&#242;&#232;&#242;&#252; &#239;&#240;&#232;&#226;&#229;&#242;&#241;&#242;&#226;&#243;&#254;&#242;&#241;&#255; &#226; &#203;&#229;&#233;&#235;&#238;&#237;&#229;, &#232; &#224;&#226;&#224;&#237;&#242;&#254;&#240;&#232;&#241;&#242;&#251; &#255;&#226;&#235;&#255;&#254;&#242;&#241;&#255; &#244;&#224;&#226;&#238;&#240;&#232;&#242;&#224;&#236;&#232; &#239;&#238;&#241;&#229;&#235;&#229;&#237;&#246;&#229;&#226;. &#194; &#242;&#238; &#226;&#240;&#229;&#236;&#255; &#234;&#224;&#234; &#229;&#241;&#242;&#252; &#236;&#237;&#238;&#227;&#238; &#240;&#224;&#225;&#238;&#242;&#251;, &#234;&#238;&#242;&#238;&#240;&#243;&#254; &#237;&#243;&#230;&#237;&#238; &#241;&#228;&#229;&#235;&#224;&#242;&#252; &#226; &#227;&#238;&#240;&#238;&#228;&#229;, &#229;&#241;&#242;&#252; &#242;&#224;&#234;&#230;&#229; &#236;&#232;&#241;&#241;&#232;&#232;, &#234;&#238;&#242;&#238;&#240;&#251;&#229; &#237;&#243;&#230;&#237;&#238; &#226;&#251;&#239;&#238;&#235;&#237;&#232;&#242;&#252; &#231;&#224; &#239;&#240;&#229;&#228;&#229;&#235;&#224;&#236;&#232; &#239;&#238;&#241;&#229;&#235;&#229;&#237;&#232;&#255;, &#239;&#229;&#240;&#229;&#247;&#232;&#241;&#235;&#229;&#237;&#237;&#251;&#229; &#237;&#224; &#228;&#238;&#241;&#234;&#229; &#226;&#224;&#234;&#224;&#237;&#241;&#232;&#233; &#226; &#240;&#251;&#225;&#237;&#238;&#236; &#245;&#238;&#231;&#255;&#233;&#241;&#242;&#226;&#229;.
&#202;&#238;&#227;&#228;&#224; &#224;&#226;&#224;&#237;&#242;&#254;&#240;&#232;&#241;&#242;&#251; &#225;&#243;&#228;&#243;&#242; &#227;&#238;&#242;&#238;&#226;&#251; &#238;&#241;&#236;&#238;&#242;&#240;&#229;&#242;&#252; &#228;&#238;&#241;&#234;&#243; &#231;&#224;&#228;&#224;&#237;&#232;&#233;, &#239;&#229;&#240;&#229;&#245;&#238;&#228;&#232;&#242;&#229; &#234; &#240;&#224;&#231;&#228;&#229;&#235;&#243; "&#208;&#251;&#225;&#238;&#235;&#238;&#226;&#241;&#242;&#226;&#238;"
</text>
"""))

# with open('docxsave.obj', 'rb') as f:
#     docx_monsters_dict = pickle.loads(f.read())
#
#
# with open('art.txt', 'w') as output_file:
#     for monster_name in sorted(docx_monsters_dict):
#         output_file.write('\n')
#         output_file.write(docx_monsters_dict[monster_name])
#         output_file.write('\n')

# del docx_monsters_dict['']
# with open('docxsave.obj', 'wb') as f:
#     f.write(pickle.dumps(docx_monsters_dict))
# print(docx_monsters_dict['Ангелы'])
# exit(0)
# cr_to_xp = {'0': 10, '1/8': 25, '1/4': 50, '1/2': 100, '1': 200, '2': 450, '3': 700, '4': 1100, '5': 1800, '6': 2300, '7': 2900, '8': 3900,'9': 5000, '10': 5900, '11': 7200, '12': 8400, '13': 10000,
#             '14': 11500, '15': 13000, '16': 15000, '17': 18000, '18': 20000,'19': 22000, '20': 25000, '21': 33000, '22': 41000, '23': 50000, '24': 62000, '25': 75000, '26': 90000, '27': 105000, '28': 120000, '29': 135000, '30': 155000}
# sizes_dict = {'Large': 'Большой', 'Medium': 'Средний', 'Small': 'Маленький', 'Tiny': 'Крошечный', 'Huge': 'Огромный', 'Gargantuan': 'Громадный'}
#
# with open('db.xml') as xml_file:
#         monsters_renew = Monster.parse_xml(xml_file.read())
# monsters_renew = Monster.load_from_file('monsters_review.obj')
# current_monsters = Monster.load_from_file('monsters.obj')

# updated_monsters = Monster.parse_xml(open('changes.xml').read().replace('D&D', 'DnD'))

# changes_in_description = Monster.parse_xml(open('TestModule_1513334269.xml', 'rb').read())
# updated_monsters = Monster.load_from_file('updated_monsters.obj')
# xml_text = open('changes_2017_12_25.xml').read()
# # print(xml_text)
#
# changes_in_description = Monster.load_patch_from_xml(html.unescape(xml_text))
# for monster in changes_in_description:
#     if not monster.text['ru_value']:
#         continue
#
#     en_name = re.findall(' \((.+)\)', monster.text['ru_value'])[0].lower()
#     print(en_name)
#     updated_monster = updated_monsters[en_name]
#     updated_monster.text = monster.text['ru_value']
# Monster.save_to_file(updated_monsters, 'updated_monsters.obj')
    # print(monster.text)
# print(changes_in_description)
# for chosen_monster in updated_monsters.values():
# # chosen_monster = updated_monsters['adult red dragon']  # type: Monster
# # print(vampire.traits)
#     for class_name in ('traits', 'legendaryactions', 'actions'):
#         chosen_monster.__dict__[class_name]['ru_value'] = ActionsAndTraits.parse_xml(chosen_monster.get(class_name, encode=False), class_name)


# current_monsters = Monster.load_from_file('monsters.obj')
# eng_monsters = Monster.parse_xml(open('db_1.xml').read())
# eng_monsters = Monster.load_from_file('eng_monsters.obj')
# # for old_name in eng_monsters.copy():
# #     eng_monsters[old_name.lower()] = eng_monsters[old_name]
# #     del eng_monsters[old_name]
# for en_name in eng_monsters:
#     if en_name not in current_monsters:
#         print(en_name)
#
# Monster.save_to_file(eng_monsters, 'eng_monsters.obj')

# for en_name in eng_monsters:
#     print(en_name)
#     if en_name not in current_monsters:
#         print(en_name)
# #
# print(current_monsters['cloud giant'])
# if current_monsters['deva'].actions['ru_value']:
#     current_monsters['deva'].actions['ru_value'] = current_monsters['deva'].actions['ru_value'].replace('\n', '\n\n')
# if current_monsters['deva'].spells['ru_value']:
#     current_monsters['deva'].spells['ru_value'] = current_monsters['deva'].spells['ru_value'].replace('\n', '\n\n')
# if current_monsters['deva'].traits['ru_value']:
#     current_monsters['deva'].traits['ru_value'] = current_monsters['deva'].traits['ru_value'].replace('\n', '\n\n')
# if current_monsters['deva'].innatespells['ru_value']:
#     current_monsters['deva'].innatespells['ru_value'] = current_monsters['deva'].innatespells['ru_value'].replace('\n', '\n\n')
# if current_monsters['deva'].legendaryactions['ru_value']:
#     current_monsters['deva'].legendaryactions['ru_value'] = current_monsters['deva'].legendaryactions['ru_value'].replace('\n', '\n\n')

# for en_monster_name in eng_monsters:
#     en_monster = eng_monsters[en_monster_name]
#     if en_monster_name.lower() not in current_monsters:
#         continue
#     ru_monster = current_monsters[en_monster_name.lower()]
#     en_value = en_monster.savingthrows['en_value']
#     print(en_value)
#     ru_monster.savingthrows['en_value'] = en_value
#   print(en_monster.get('speed', ru=False))
# Monster.save_to_file(eng_monsters, 'eng_monsters.obj')
# for my_monster_name in sorted(current_monsters):
#     if my_monster_name not in eng_monsters:
#         print(my_monster_name)

# print(sorted(current_monsters.keys()))
# for monster_name in monsters_renew.copy():
#     # print(monsters_renew[monster_name].get('savingthrows', encode=False))
#     if not current_monsters[monster_name].savingthrows['ru_value'] and monsters_renew[monster_name].savingthrows['ru_value']:
#         current_monsters[monster_name].savingthrows['ru_value'] = monsters_renew[monster_name].savingthrows['ru_value']
#         print(monster_name)

# Monster.save_to_file(monsters_renew, filename='monsters_review.obj')
# Monster.save_to_file(current_monsters)
# print(monsters_renew['Adult Black Dragon'].legendaryactions)
# print(current_monsters['Adult Black Dragon'].legendaryactions)
# for monster_number in current_monsters:
#     monster = current_monsters[monster_number]
#     monster.number = monster_number
#     eng_name = monster.name['en_value']
#     new_dict[eng_name] = monster
# Monster.save_to_file(new_dict)
# Monster.save_to_file(monsters_renew, 'monsters_review.obj')

# monsters_dict = Monster.filter({'name': 'Adult Black Dragon'})
# print(monsters_dict)

# monster = Monster()
# for attribute in monster.__dict__:
#     if attribute not in Monster.path_in_xml:
#         print(attribute)

        # my_en_names = sorted([monster.name['en_value'].lower() for monster in Monster.registered_monsters.values()])
# with codecs.open('phantom_dict.txt', 'r', 'utf_8_sig') as dict_file:
#     for string in dict_file:
#         en_name, ru_name = string.split('\t')
#         en_name = en_name.strip()
#         ru_name = ru_name.strip()
#         if en_name.lower() not in my_en_names:
#             continue
#
#         current_monsters = Monster.find_several_elements_by_value('name', en_name, strict=True)
#         if len(current_monsters) != 1:
#             print(en_name)
#             print(current_monsters)
#             exit(1)
#         current_monster = current_monsters[0]
#
#         my_ru_name = current_monster.name['ru_value']
#         if my_ru_name.lower() != ru_name.lower():
#             print('%s %s %s' % (en_name, ru_name, my_ru_name))
#             current_monster.name['ru_value'] = ru_name
#             # print(my_en_names)
#             # exit(0)
# print('\n\n')
# for monster in Monster.registered_monsters.values():
#     print(monster.get('name', both=True, encode=False))

# for monster in Monster.registered_monsters.values():
#     size = monster.get('size', ru=False)
#     ru_size = sizes_dict[size]
#     monster.size = ru_size
#     xp = cr_to_xp[str(cr)]
#     monster.xp = xp
#     print(cr, xp)
    # if monster.hp['en_value'] == 0:
    #     hp = 0
    #     hd = ''
    # else:
    #     hp = monster.hp['en_value'].split()[0]
    #     hd = monster.hp['en_value'].split('(')[1].replace(')', '')
    # monster.hp = hp
    # monster.hd = hd
    # print(hp, hd)


#
# del docx_monsters_dict['Прочие демонические повелители']
# with open('docxsave.obj', 'wb') as f:
#     f.write(pickle.dumps(docx_monsters_dict))
#     f.close()
# exit(0)
#
# for docx_monster_name in sorted(docx_monsters_dict.keys()):
#     xml_monsters = Monster.find_several_elements_by_value(current_monsters, 'name', docx_monster_name)
#     if len(xml_monsters) == 0:
#         print(docx_monster_name)
#         print('\n\n')
#         ru_names = sorted([m.name['ru_value'] for m in current_monsters.values()])
#         print(ru_names)
#         print('\n\n')
#         print(docx_monster_name)
#         exit(0)
#     else:
#         print(docx_monster_name)
#         print([x.name['ru_value'] for x in xml_monsters])
#         print('\n\n')
# exit(0)
# doc_name = 'Юголоты'
# ru_names = ['Арканалот', 'Ультролот', 'Меззолот', 'Никалот']
# for ru_name in ru_names:
#     print(ru_name)
#     monster = Monster.find_several_elements_by_value(current_monsters, 'name', ru_name)[0]
#     if not current_monsters[monster.name['en_value'].lower()].text['ru_value']:
#         current_monsters[monster.name['en_value'].lower()].text['ru_value'] = docx_monsters_dict[doc_name]
#     else:
#         current_monsters[monster.name['en_value'].lower()].text['ru_value'] += docx_monsters_dict[doc_name]
#
# del docx_monsters_dict[doc_name]

# Monster.save_to_file(current_monsters, 'monsters.obj')
# with open('docxsave.obj', 'wb') as f:
#     f.write(pickle.dumps(docx_monsters_dict))
#     f.close()
# with open('stories.obj', 'rb') as stories_file:
#     stories = pickle.loads(stories_file.read())
#     for story in stories:
#         print(story)
#         input()